/*Que es SQL/ Structured Query Language: Lenguaje estructurado de consultas. Inventado por IBM
Es un lenguaje inventado para interactuar con bases de datos relacionales.

__COMANDOS SQL: 

DDL; Data Definition Language = lenguaje de definicion de datos (crear y modificar estructura de una base de datos).
Comandos = CREATE, ALTER, DROP, TRUNCATE.

DML; Data Manipulation Language = Lenguaje de manipulacion de datos (Hacer consultas de seleccion y accion).
Comandos = SELECT, INSERT, UPDATE, DELETE.

DCL; Data Control Language = Lenguaje de control de datos (Proporcionar seguridad a la informacion).
Comandos = GRANT, REVOKE.

TCL; Transaction Control Language = lengueje de control de transacciones (Gestion de cambios en los datos)
Comandos = COMMIT, ROLLBACK, SAVEPOINT.

__CLAUSULAS SQL:

FROM; Especifica la tabla de la que se quieren obtener los datos. 
WHERE; Especifica las condiciones o criterios de los registros seleccionados. 
GROUP BY; Para agrupar los registros seleccionados en funcion de un campo. 
HAVING; Especifica las funciones o criterios que deben cumplir los grupos. 
ORDER BY; Ordena los registros seleccionados en funcion de un campo.

__OPERADORES DE COMPARACION:

< | Menor que
> | mayor que
= | Igual
<= | Menor o igual que
>= | Mayor o igual que
<> | Distinto que
BETWEEN | Entre. utilizado para especificar rangos de valores.
LIKE | Como. Utlisado con caracteres comodin (?*).
IN | En. Para especificar registros en un campo en concreto.
ANY | Para especificar cualquiera
ALL | Para especificar todos

__OPERADORES LOGICOS:

AND | Y lógico
OR | O lógico
NOT | Negación lógica

__fUNCIONES DE AGRUPACION:

AVG(); Calcula el promedio de un campo.
COUNT(); Cuenta los registros de un campo.
SUM(); Suma los valores de un campo.
MAX(); Devuelve el maximo de un campo.
MIN(); Devuelve el minimo d eun campo.

Now(); devuelve el dia y hora actuales.
Datediff(); devuelve la diferencia que hay entre dos fechas.
Date_format(); permite formatear resultados para quitar decimales, redondear.
Concat(); permite concatenar, se usa con cadenas de texto.

__Instruccion SQL: Comando + Clausulas + Operadores + Funciones

__Orden de escritura: Comando + Clausula From + Clausula Where + Clausula Group by + Cláusula Having + Cláusula Order by.

----------------------------------------------------------------------------------------------------------------------------------------------

CONSULTAS:
(CLAUSULA FROM) SELECT * FROM pructos;
(CLAUSULA FROM Y WHERE) SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO FROM productos WHERE SECCIÓN="CERÁMICA";

CONSULTA + OPPERADORES LOGICOS
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO OR) SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO FROM productos WHERE SECCIÓN="CERÁMICA" OR SECCIÓN="DEPORTES";
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO AND) SELECT * FROM productos WHERE SECCIÓN="DEPORTES" AND PAÍSDEORIGEN="USA";
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO AND O DE COMPARACION BETWEEN) SELECT * FROM productos WHERE FECHA >='2000-03-20' AND FECHA <='2000-04-30';   ||  SELECT * FROM productos WHERE FECHA BETWEEN '2000-03-20' AND '2000-04-30';

CONSULTAS DE ORDENAMIENTO
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO OR + CLAUSULA ORDER BY) SELECT * FROM productos WHERE SECCIÓN="CERÁMICA" OR SECCIÓN="DEPORTES" ORDER BY SECCIÓN;
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO OR + CLAUSULA ORDER BY + DESC) SELECT * FROM productos WHERE SECCIÓN="CERÁMICA" OR SECCIÓN="DEPORTES" ORDER BY SECCIÓN DESC;
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO OR + CLAUSULA ORDER BY) SELECT * FROM productos WHERE SECCIÓN="CERÁMICA" OR SECCIÓN="DEPORTES" ORDER BY SECCIÓN, PRECIO;
(CLAUSULA FROM Y WHERE + OPERADOR LOGICO OR + CLAUSULA ORDER BY + DESC) SELECT * FROM productos WHERE SECCIÓN="CERÁMICA" OR SECCIÓN="DEPORTES" ORDER BY SECCIÓN DESC, PRECIO ASC;

CONSULTAS DE AGRUPACION
(FUNCION SUM + CLAUSULA FROM + CLAUSULA GROUP BY) SELECT SECCIÓN, SUM(PRECIO) FROM productos GROUP BY SECCIÓN; 
(FUNCION SUM + CLAUSULA FROM + CLAUSULA GROUP BY + CLAUSULA ORDER BY COMO ALIAS DE PRECIO) SELECT SECCIÓN, SUM(PRECIO) AS SUMA_ARTICULOS FROM productos GROUP BY SECCIÓN ORDER BY SUMA_ARTICULOS;
(FUNCION SUM + CLAUSULA FROM + CLAUSULA GROUP BY + CLAUSULA ORDER BY COMO ALIAS DE PRECIO) SELECT SECCIÓN, NOMBREARTICULO, SUM(PRECIO) AS SUMA_ARTICULOS FROM productos GROUP BY SECCIÓN ORDER BY SUMA_ARTICULOS;
(FUNCION AVG + CLAUSULA HAVING) SELECT SECCIÓN, AVG(PRECIO) AS MEDIA_ARTICULOS FROM productos GROUP BY SECCIÓN HAVING SECCIÓN='DEPORTES' OR SECCIÓN='CONFECCIÓN';
(FUNCION COUNT + CLAUSULA GROUP BY) SELECT POBLACIÓN, COUNT(CÓDIGOCLIENTE) AS N_CLIENTES FROM clientes GROUP BY POBLACIÓN;
(FUNCION MAX + CLAUSULA GROUP BY) SELECT SECCIÓN, MAX(PRECIO) AS PRECIO_ALTO FROM productos WHERE SECCIÓN='CONFECCIÓN' GROUP BY SECCIÓN;

CONSULTAS DE CALCULO
(CALCULO CON ALIAS + FUNCION ROUND) SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO, ROUND(PRECIO*1.21,3) AS PRECIO_TOTAL FROM productos;
(CALCULO CON ALIAS + UN DESCUENTO) SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO, PRECIO-3 AS PRECIO_DTO FROM productos;
(CALCULO + FUNCION NOW, DATEDIFF Y DATE_FORMAT) SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO, FECHA, DATE_FORMAT(NOW(),'%D-%M-%Y') AS DIA_DE_HOY, DATEDIFF(NOW(), FECHA) AS DIFERENCIA_DIAS FROM productos WHERE SECCIÓN="DEPORTES";

CONSULTAS MULTITABLA UNION
(CONSULTA MULTITABLA UNION) SELECT * FROM productos WHERE SECCIÓN="DEPORTES" UNION SELECT * FROM productosnuevos WHERE SECCIÓN="DEPORTES DE RIESGO";
(CONSULTA MULTITABLA UNION CON DIFERENTE CAMPO DE CONSULTA) SELECT * FROM productos WHERE PRECIO>500 UNION SELECT * FROM productosnuevos WHERE SECCIÓN="ALTA COSTURA";
(CONSULTA MULTITABLA UNION ALL) SELECT * FROM productos WHERE SECCIÓN="DEPORTES" UNION ALL SELECT * FROM productosnuevos WHERE SECCIÓN="DEPORTES";

CONSULTAS MULTITABLA INNER JOIN
(CONSULTA MULTITABLA INNER JOIN)SELECT * FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.[CÓDIGO CLIENTE]=PEDIDOS.[CÓDIGO CLIENTE] WHERE POBLACIÓN='MADRID';
SELECT CLIENTES.CÓDIGOCLIENTE, POBLACIÓN, DIRECCIÓN, NÚMERODEPEDIDO, PEDIDOS.CÓDIGOCLIENTE, FORMADEPAGO FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE WHERE POBLACIÓN='MADRID';

CONSULTAS MULTITABLA LEFT JOIN
(CONSULTA MULTITABLA LEFT JOIN)SELECT * FROM CLIENTES LEFT JOIN PEDIDOS ON CLIENTES.[CÓDIGO CLIENTE]=PEDIDOS.[CÓDIGO CLIENTE] WHERE POBLACIÓN='MADRID';
SELECT CLIENTES.CÓDIGOCLIENTE, POBLACIÓN, DIRECCIÓN, NÚMERODEPEDIDO, PEDIDOS.CÓDIGOCLIENTE, FORMADEPAGO FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE WHERE POBLACIÓN='MADRID';

CONSULTAS MULTITABLA RIGHT JOIN
SELECT * FROM CLIENTES RIGHT JOIN PEDIDOS ON CLIENTES.[CÓDIGO CLIENTE]=PEDIDOS.[CÓDIGO CLIENTE] WHERE POBLACIÓN='MADRID';
SELECT CLIENTES.CÓDIGOCLIENTE, POBLACIÓN, DIRECCIÓN, NÚMERODEPEDIDO, PEDIDOS.CÓDIGOCLIENTE, FORMADEPAGO FROM CLIENTES RIGHT JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE WHERE POBLACIÓN='MADRID';
SELECT CLIENTES.CÓDIGOCLIENTE, POBLACIÓN, DIRECCIÓN, NÚMERODEPEDIDO, PEDIDOS.CÓDIGOCLIENTE, FORMADEPAGO FROM CLIENTES LEFT JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE WHERE POBLACIÓN='MADRID' AND PEDIDOS.CÓDIGOCLIENTE IS NULL;

SUBCONSULTA ESCALONADA
SELECT NOMBREARTÍCULO, SECCIÓN FROM productos WHERE PRECIO > (SELECT AVG(PRECIO) FROM productos);

SUBCONSULTA DE LISTA
SELECT * FROM productos WHERE PRECIO > ALL (SELECT PRECIO FROM productos WHERE SECCIÓN='CERÁMICA');
SELECT * FROM productos WHERE PRECIO > ANY (SELECT PRECIO FROM productos WHERE SECCIÓN='CERÁMICA');
SELECT * FROM productos WHERE PRECIO > ALL (SELECT PRECIO FROM productos WHERE SECCIÓN='JUGUETERÍA');
SELECT * FROM productos WHERE PRECIO > ANY (SELECT PRECIO FROM productos WHERE SECCIÓN='JUGUETERÍA');

SUBCONSULTA CORRELACIONADA
(CON PREDICADO IN)SELECT NOMBREARTÍCULO, PRECIO FROM PRODUCTOS WHERE CÓDIGOARTÍCULO IN (SELECT CÓDIGOARTÍCULO FROM PRODUCTOSPEDIDOS WHERE UNIDADES>20);
(OPCION CONSULTA MULTITABLA)SELECT NOMBREARTÍCULO, PRECIO FROM PRODUCTOS INNER JOIN PRODUCTOSPEDIDOS ON PRODUCTOS.CÓDIGOARTÍCULO = PRODUCTOSPEDIDOS.CÓDIGOARTÍCULO WHERE UNIDADES>20;
(CON PREDICADO NOT IN)SELECT EMPRESA, POBLACIÓN FROM CLIENTES WHERE CÓDIGOCLIENTE NOT IN(SELECT CÓDIGOCLIENTE FROM PEDIDOS WHERE FORMADEPAGO="TARJETA);

CONSULTAS DE ACCION(ACTUALIZACION)
UPDATE PRODUCTOS SET PRECIO=PRECIO+10 WHERE SECCIÓN='DEPORTES';
UPDATE PRODUCTOS SET SECCIÓN='DEPORTIVOS' WHERE SECCIÓN='DEPORTES';

CONSULTAS DE ACCION(CREACION DE TABLA)
(ACCESS)SELECT * INTO CLIENTES_MADRID FROM CLIENTES WHERE POBLACIÓN='MADRID';
(SQL)CREATE TABLE CLIENTES_MADRID SELECT * FROM CLIENTES WHERE POBLACIÓN='MADRID';

CONSULTAS DE ACCION(DELETE)
DELETE FROM CLIENTES WHERE POBLACIÓN='MADRID';
DELETE FROM PRODUCTOS WHERE SECCIÓN='DEPORTIVOS' AND PRECIO BETWEEN 50 AND 100;
SELECT EMPRESA FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE;
SELECT DISTINCT EMPRESA FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE;
DELETE DISTINCTROW CLIENTES.*, PEDIDOS.CÓDIGOCLIENTE FROM CLIENTES LEFT JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE WHERE PEDIDOS.CÓDIGOCLIENTE IS NULL;

CONSULTAS DE ACCION(DATOS ANEXADOS)
INSERT INTO CLIENTES SELECT * FROM CLIENTES_MADRID;
INSERT INTO CLIENTES (CÓDIGOCLIENTE, EMPRESA, POBLACIÓN, TELÉFONO) SELECT CÓDIGOCLIENTE, EMPRESA, POBLACIÓN, TELÉFONO FROM CLIENTES_MADRID;

CONSULTAS REFERENCIAS CRUZADAS
TRANSFORM SUM(PRECIO) AS TOTAL SELECT NOMBREARTÍCULO FROM PRODUCTOS GROUP BY NOMBREARTÍCULO PIVOT SECCIÓN;
TRANSFORM SUM(PRECIO) AS TOTAL SELECT SECCIÓN FROM PRODUCTOS GROUP BY SECCIÓN PIVOT NOMBREARTÍCULO;
TRANSFORM COUNT(CÓDIGOARTÍCULO) AS N_ARTICULOS SELECT NOMBREARTÍCULO FROM PRODUCTOS GROUP BY NOMBREARTÍCULO PIVOT SECCIÓN;
[(PREVIA)]SELECT EMPRESA, POBLACIÓN, FORMADEPAGO FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE=PEDIDOS.CÓDIGOCLIENTE;
TRANSFORM COUNT(POBLACIÓN) AS TOTAL_FORMADEPAGO SELECT EMPRESA FROM PREVIA GROUP BY EMPRESA PIVOT FORMADEPAGO;
TRANSFORM SUM(PRECIO) AS TOTAL SELECT NOMBREARTÍCULO, PAÍSDEORIGEN FROM PRODUCTOS GROUP BY NOMBREARTÍCULO, PAÍSDEORIGEN PIVOT SECCIÓN;

DDL CREATE DROP
CREATE TABLE PRUEBA (NOMBRE VARCHAR(20));
DROP TABLE PRUEBA;
CREATE TABLE PRUEBA (ID_ALUMNO INT AUTO_INCREMENT, NOMBRE VARCHAR(20), APELLIDO VARCHAR(20), EDAD TINYINT, FECHA_NACIMIENTO DATE, CARNET BOOLEAN, PRIMARY KEY(ID_ALUMNO));

DDL ALTER
ALTER TABLE prueba ADD COLUMN POBLACION VARCHAR(20);
ALTER TABLE prueba DROP COLUMN POBLACION;
ALTER TABLE CLIENTES_MADRID ADD COLUMN FECHA_ALTA VARCHAR(10);
ALTER TABLE CLIENTES_MADRID ALTER COLUMN FECHA_ALTA DATE;
ALTER TABLE prueba ADD COLUMN LUGAR_NACIMIENTO VARCHAR(20);
ALTER TABLE prueba ALTER COLUMN LUGAR_NACIMIENTO SET DEFAULT 'DESCONOCIDO';
ALTER TABLE prueba ALTER COLUMN LUGAR_NACIMIENTO DROP DEFAULT;

INDICES PRIMARIOS
CREATE TABLE EJEMPLO (DNI TEXT, NOMBTE TEXT, APELLIDO TEXT, EDAD NUMBER);
ALTER TABLE EJEMPLO ADD PRIMARY KEY(DNI);
ALTER TABLE EJEMPLO ADD PRIMARY KEY(NOMBRE, APELLIDO);
CREATE TABLE EJEMPLO (DNI TEXT, NOMBTE TEXT, APELLIDO TEXT, EDAD NUMBER, PRIMARY KEY(DNI));

INDICES ORDINARIOS
CREATE INDEX MIINDICE ON EJEMPLO (APELLIDO);

INDICES UNICOS
CREATE UNIQUE INDEX MIINDICE ON EJEMPLO (APELLIDO);

INDICES CONPUESTOS
CREATE UNIQUE INDEX MIINDICE ON EJEMPLO (NOMBRE, APELLIDO);

ELIMINAR INDICES
CREATE INDEX MIINDICE ON EJEMPLO(DNI);
DROP INDEX MIINDICE ON EJEMPLO;
ALTER TABLE EJEMPLO ADD PRIMARY KEY(DNI);
ALTER TABLE EJEMPLO DROP PRIMARY KEY;

TRIGGER INSERCION
CREATE TABLE REG_PRODUCTOS (CODIGOARTICULO VARCHAR(25), NOMBREARTICULO VARCHAR(30), PRECIO INT(4), INSERTADO DATETIME);
CREATE TRIGGER PRODUCTOS_AI AFTER INSERT ON PRODUCTOS FOR EACH ROW INSERT INTO reg_productos(CODIGOARTICULO, NOMBREARTICULO, PRECIO, INSERTADO)VALUES(NEW.CODIGOARTICULO, NEW.NOMBREARTICULO, NEW.PRECIO, NOW());
INSERT INTO PRODUCTOS (CODIGOARTICULO, NOMBREARTICULO, PRECIO, PAISDEORIGEN)VALUES('AR75', 'PANTALON', 50, 'ESPAÑA');

TRIGGER ACTUALIZACION
CREATE TABLE PRODUCTOS_ACTUALIZADOS (ANTERIOR_CODIGOARTICULO VARCHAR(4), ANTERIOR_NOMBREARTICULO VARCHAR(25), ANTERIOR_SECCION VARCHAR(15), ANTERIOR_PRECIO INT(4), ANTERIOR_IMPORTADO VARCHAR(15), ANTERIOR_PAISDEORIGEN VARCHAR(15), ANTERIOR_FECHA DATE, NUEVO_CODIGOARTICULO VARCHAR(4), NUEVO_NOMBREARTICULO VARCHAR(25), NUEVO_SECCION VARCHAR(15), NUEVO_PRECIO INT(4), NUEVO_IMPORTADO VARCHAR(15), NUEVO_PAISDEORIGEN VARCHAR(15), NUEVO_FECHA DATE, USUARIO VARCHAR(15), F_MODIF DATE));
CREATE TRIGGER ACTUALIZA_PRODUCTOS_BU BEFORE UPDATE ON productos FOR EACH ROW INSERT INTO productos_actualizados (ANTERIOR_CODIGOARTICULO, ANTERIOR_NOMBREARTICULO, ANTERIOR_SECCION, ANTERIOR_PRECIO, ANTERIOR_IMPORTADO, ANTERIOR_PAISDEORIGEN, ANTERIOR_FECHA, NUEVO_CODIGOARTICULO, NUEVO_NOMBREARTICULO, NUEVO_SECCION, NUEVO_PRECIO, NUEVO_IMPORTADO, NUEVO_PAISDEORIGEN, NUEVO_FECHA, USUARIO, F_MODIF)VALUES(OLD.CODIGOARTICULO, OLD.NOMBREARTICULO, OLD.SECCION, OLD.PRECIO, OLD.IMPORTADO, OLD.PAISDEORIGEN, OLD.FECHA, NEW.CODIGOARTICULO, NEW.NOMBREARTICULO, NEW.SECCION, NEW.PRECIO, NEW.IMPORTADO, NEW.PAISDEORIGEN, NEW.FECHA, CURRENT_USER(), NOW());
UPDATE productos SET PRECIO=PRECIO+20 WHERE CODIGOARTICULO='AR07';

TRIGGER ELIMINACION
CREATE TABLE PROD_ELIMINADOS (C_ART VARCHAR(5), NOMBRE VARCHAR(15), SECCION VARCHAR(15), PRECIO INTEGER, PAIS_ORIGEN VARCHAR(15));
CREATE TRIGGER ELIMINA_PRODUCTOS_AD AFTER DELETE ON productos FOR EACH ROW INSERT INTO prod_eliminados (C_ART, NOMBRE, PAIS_ORIGEN, PRECIO, SECCION)VALUES(OLD.CODIGOARTICULO, OLD.NOMBREARTICULO, OLD.PAISDEORIGEN, OLD.PRECIO, OLD.SECCION);
DELETE FROM productos WHERE CODIGOARTICULO='AR41';

MODIFICAR TRIGGER
ALTER TABLE prod_eliminados ADD COLUMN (USUARIO VARCHAR(15), FECHA_MODIF DATE);
DROP TRIGGER IF EXISTS `ELIMINA_PRODUCTOS_AD`; CREATE DEFINER=`root`@`localhost` TRIGGER `ELIMINA_PRODUCTOS_AD` AFTER DELETE ON `productos` FOR EACH ROW INSERT INTO prod_eliminados (C_ART, NOMBRE, PAIS_ORIGEN, PRECIO, SECCION, USUARIO, FECHA_MODIF) VALUES (OLD.CODIGOARTICULO, OLD.NOMBREARTICULO, OLD.PAISDEORIGEN, OLD.PRECIO, OLD.SECCION, CURRENT_USER(), NOW())
DELETE FROM productos WHERE CODIGOARTICULO='AR40';

PROCEDIMIENTOS ALMACENADOS
CREATE PROCEDURE MUESTRA_CLIENTES() SELECT * FROM CLIENTES WHERE POBLACION='MADRID';
CALL MUESTRA_CLIENTES();

PROCEDIMIENTOS ALMACENADOS CON PARAMETROS
CREATE PROCEDURE ACTUALIZA_PRODUCTOS(N_PRECIO INT, CODIGO VARCHAR(4)) UPDATE productos SET PRECIO=N_PRECIO WHERE CODIGOARTICULO=CODIGO;
CALL ACTUALIZA_PRODUCTOS(59, 'AR22');

PROCEDIMIENTOS Y TRIGGERS
DELIMITER $$
CREATE PROCEDURE CALCULA_EDAD(AGNO_NACIMIENTO INT) 
    BEGIN 
        DECLARE AGNO_ACTUAL INT DEFAULT 2016; 
        DECLARE EDAD INT; 
        SET EDAD=AGNO_ACTUAL-AGNO_NACIMIENTO;
        SELECT EDAD;
    END;$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER REVISA_PRECIO_BU BEFORE UPDATE ON productos FOR EACH ROW
	BEGIN
    	IF(NEW.PRECIO<0) THEN
        	SET NEW.PRECIO=0;
        ELSEIF(NEW.PRECIO>1000) THEN
        	SET NEW.PRECIO=1000;
        END IF;
    END;$$    
 DELIMITER ;

UPDATE productos SET PRECIO=15 WHERE CODIGOARTICULO='AR01';
UPDATE productos SET PRECIO=8500 WHERE CODIGOARTICULO='AR01';

DELIMITER $$
CREATE TRIGGER REVISA_PRECIO_BU BEFORE UPDATE ON productos FOR EACH ROW
	BEGIN
    	IF(NEW.PRECIO<0) THEN
        	SET NEW.PRECIO=OLD.PRECIO;
        ELSEIF(NEW.PRECIO>1000) THEN
        	SET NEW.PRECIO=OLD.PRECIO;
        END IF;
    END;$$    
 DELIMITER ;

VISTAS CREAR
CREATE VIEW ART_DEPORTES AS
SELECT NOMBREARTICULO, SECCION, PRECIO FROM productos WHERE SECCION='DEPORTES';
UPDATE productos SET PRECIO=PRECIO+10 WHERE NOMBREARTICULO='RAQUETA TENIS';

VISTAS ELIMINAR
CREATE VIEW ART_CERAMICA AS
SELECT NOMBREARTICULO, SECCION, PRECIO FROM productos WHERE SECCION='CERAMICA';
DROP VIEW art_ceramica;

VISTAS MODIFICAR
ALTER VIEW art_deportes AS
SELECT NOMBREARTICULO, SECCION, PAISDEORIGEN FROM productos WHERE PAISDEORIGEN='ESPAÑA';
*/